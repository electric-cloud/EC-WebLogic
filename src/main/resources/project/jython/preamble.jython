#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# imports

import re
import sys
import string
import random
import time as pytime
import warnings

# end of imports

debug_level = r'''
[% debug_level %]
'''.strip()
debug_level = int(debug_level)


def warn(message):
    warnings.warn("WARNING: " + message)

def print_info(message):
    if debug_level > 0:
        print "[INFO] " + message

def print_debug(message):
    if debug_level > 1:
        print "[DEBUG] " + message



MINIMAL_VERSION_FOR_NAMED_SESSIONS = '12.2.1.1'
MINIMAL_VERSION_FOR_REDEPLOYMENT = '12.0.0.0'

print "WebLogic version is: %s" % (version)
def determineWebLogicVersion():
    result = re.match('^\s*?WebLogic\sServer\s([\d.]+)\s', version)
    versionNumber = result.group(1)
    return versionNumber

# compares 2 versions.
# returns 1 if version1 > version2
# returns -1 if version1 < version2
# returns 0 if versions are the same.
def compareVersions(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(".")]
    return cmp(normalize(version1), normalize(version2))

def isRedeploymentPossible():
    wlVersion = determineWebLogicVersion()
    if compareVersions(wlVersion, MINIMAL_VERSION_FOR_REDEPLOYMENT) < 0:
        return 0;
    else:
        return 1

def terminateEditSession(sessionName):
    wlVersion = determineWebLogicVersion()
    if compareVersions(wlVersion, MINIMAL_VERSION_FOR_NAMED_SESSIONS) < 0:
        print "WARNING" + ':' + "Named Sessions are not available prior to Weblogic Server " +  MINIMAL_VERSION_FOR_NAMED_SESSIONS + ". Your version is: " + version
    else:
        destroyEditSession(sessionName, force = true)
    return 1
    
def isNamedSessionEnabled():
    if [% enable_named_sessions %]:
        wlVersion = determineWebLogicVersion()
        if compareVersions(wlVersion, MINIMAL_VERSION_FOR_NAMED_SESSIONS) < 0:
            print "WARNING" + ':' + "Named Sessions are not available prior to Weblogic Server " + MINIMAL_VERSION_FOR_NAMED_SESSIONS + ". Your version is: " + version
            return 0
        else:
            return 1
    else:
        return 0

def isExclusiveSessionEnabled():
    return 0

def genRandomSessionName(l):
    result = 'ElectricFlowEditSession_'
    for _ in range(l):
        result = result + random.choice(string.lowercase)

    return result

randSessionName = genRandomSessionName(12)

def startChanges():
    if isNamedSessionEnabled():
        print "Named sessions are enabled"
        print "Generated edit session name is %s" % (randSessionName)
        edit(randSessionName)
    else:
        edit()

    if isExclusiveSessionEnabled():
        print "Exclusive sessions are enabled"
        startEdit(300000, 300000, 'true')
    else:
        startEdit()

# Saves and activates changes
def commitChanges(lockTimeout = None):
    save()
    params = {'block': 'true'}
    if lockTimeout:
        params['timeout'] = lockTimeout
    activate(**params)
    if isNamedSessionEnabled():
        print "Terminating edit session %s" % (randSessionName)
        terminateEditSession(randSessionName)


def discardChanges():
    stopEdit('y')
    if isNamedSessionEnabled():
        print "Terminating edit session %s" % (randSessionName)
        terminateEditSession(randSessionName)

# add parse function
def parseOptions(options):
    print "Options: %s" % (options)
    optionsDict = {}
    for nextArgument in re.split('\s*,\s*', options):
        arguments = nextArgument.split('=')
        optionsDict[arguments[0]]=arguments[1]
    return optionsDict

# appName parameter is mandatory. Use * for appVersion and appPlanVersion to get all.
def getApplication(appName, appVersion = '', appPlanVersion = '', isLibrary = 0):
    result = []
    deployments = [];
    if not isLibrary:
        deployments = cmo.getAppDeployments()
    else:
        deployments = cmo.getLibraries()
    for deployment in deployments:
        deployment_name = deployment.getName()
        name = ''
        version = ''
        plan_version = ''

        version_array = []
        if not isLibrary:
            version_array = deployment_name.split('#')
        else:
            version_array = re.split('[#@]', deployment_name)

        if len(version_array) == 1:
            name = version_array[0]
        elif len(version_array) == 2:
            name, version = version_array
        elif len(version_array) == 3:
            name, version, plan_version = version_array

        if name == appName:
            if appVersion != '*' and appVersion != version:
                continue
            if appPlanVersion != '*' and appPlanVersion != plan_version:
                continue
            result.append(deployment)

    return result

def getApplicationState(appName, appVersion = '', appPlanVersion = ''):
    deployments = getApplication(appName, appVersion, appPlanVersion)
    applicationState = {}

    for deployment in deployments:
        domainConfig()
        deploymentName = deployment.getName()
        cd ('/AppDeployments/' + deploymentName + '/Targets')
        applicationState[deploymentName] = []
        mytargets = ls(returnMap='true')
        domainRuntime()
        cd('AppRuntimeStateRuntime')
        cd('AppRuntimeStateRuntime')

        for targetinst in mytargets:
            currentState = cmo.getCurrentState(deploymentName, targetinst)
            print "Curstate: --- " + currentState + "---\n"
            applicationState[deploymentName].append(currentState)

    return applicationState

# checks if application exists:
def checkIfApplicationExists(appName, appVersion = '', appPlanVersion = ''):
    if not appVersion:
        appVersion = '*'
    if not appPlanVersion:
        appPlanVersion = '*'

    app = getApplication(appName, appVersion, appPlanVersion)
    if app:
        return len(app)
    return 0

def checkIfLibraryExists(libName, libSpecVersion = '', libImplVersion = ''):
    if not libSpecVersion:
        libSpecVersion = '*'
    if not libImplVersion:
        libImplVersion = '*'

    libs = getApplication(libName, libSpecVersion, libImplVersion, 1)
    if libs:
        return len(libs)
    return 0

def isApplicationHasStatus(appName, appVersion, appPlanVersion, appStatuses):
    states = getApplicationState(appName, appVersion, appPlanVersion)
    result = []
    if not states:
        return result
    for key in states.keys():
        for state in states[key]:
            if state in appStatuses:
                result.append(key)
                break

    return result
        
def runDeploy(appName, appPath, deployParams, options):
    try:
        startChanges()
        params = {}
        params.update(deployParams)
        params.update(options)
        status = deploy(appName = appName, path = appPath, **params)
        commitChanges()
        if status.isFailed():
            print 'ERROR' + ':' + status.getMessage()
            sys.exit(1)
    except WLSTException, e:
        print "Deploy failed"
        print str(e)
        discardChanges()
        sys.exit(1)

def runRedeploy(appName, appPath, planPath, options):
    try:
        startChanges()
        status = redeploy(appName = appName, appPath = appPath, planPath = planPath, **options)
        commitChanges()
        if status.isFailed():
            print 'ERROR' + ':' + status.getMessage()
            sys.exit(1)
    except WLSTException, e:
        print "Redeploy failed"
        print str(e)
        discardChanges()
        sys.exit(1)

def startCluster(clustername):
    try:
        start(clustername, "Cluster", block='false');
    except Exception, e:
        print 'Error while starting cluster', e
        dumpStack()
        return

def getClusterMembers(clusterName):
    serverConfig()
    cd('/')
    cluster = ('/Clusters/' + clusterName)
    try:
        cd(cluster)
    except Exception, e:
        print "ERROR" + ":" + "Cluster " + clusterName + " doesn't exist."
        print "Exception: %s" % (e)
        dumpStack()
        sys.exit(1)
    servers = cmo.getServers()
    return servers

def shutdownCluster(clustername, timeout, ignoreSessions, forceShutdown):
    block = 'false'
    try:
        shutdown(clustername, "Cluster", ignoreSessions, timeout, forceShutdown, block);
    except Exception, e:
        print 'Error while shutting down cluster',e
        dumpStack()
        return

def isClusterHasStatus(clusterName, clusterStatuses):
    serverConfig()
    retval = []
    servers = getClusterMembers(clusterName)
    print "Clustername: %s" % (clusterName)
    domainRuntime()
    for server in servers:
        srv = server.getName()
        status = cmo.lookupServerLifeCycleRuntime(srv).getState()
        if status in clusterStatuses:
            retval.append(srv)
    return retval

def getClusterStatus(clusterName):
    serverConfig()
    retval = {}
    servers = getClusterMembers(clusterName)
    domainRuntime()
    for server in servers:
        srv = server.getName()
        retval[srv] = cmo.lookupServerLifeCycleRuntime(srv).getState()
    return retval
    

#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# imports

import re
import sys
import string
import random
import time as pytime
import warnings

# end of imports

debug_level = r'''
[% debug_level %]
'''.strip()

if debug_level:
    debug_level = int(debug_level)
else :
    debug_level = 0

# Constants
MINIMAL_VERSION_FOR_NAMED_SESSIONS = '12.2.1.1'
MINIMAL_VERSION_FOR_REDEPLOYMENT = '12.0.0.0'

VERSION_12_R1 = '12.1.0.0'
VERSION_11 = '10.3.6.0'
VERSION_12_R2 = '12.2.1.1'

DO_NOTHING = 'do_nothing'
REMOVE_AND_CREATE = 'remove_and_create'
SELECTIVE_UPDATE = 'selective_update'


print "WebLogic version is: %s" % (version)

def isEmpty(value):
    return value == None or value == ''

def warn(message):
    warnings.warn("WARNING: " + message)

def print_summary(message):
    print 'SUMMARY: ' + message

def print_error(message):
    print "ERROR" + ":" + message

def print_info(message):
    if debug_level >= 0:
        print "[WLST INFO] " + message

def print_debug(message):
    if debug_level >= 1:
        print "[WLST DEBUG] " + message

def splitSeparatedString(string, delimeter = '\\s*,\\s*'):
    retval = re.split(delimeter, string)
    return retval

def getJMSSystemResourcePath(jms_module_name):
    return "/JMSSystemResources/%s"%(jms_module_name)

def getJMSModulePath(jms_module_name):
    return "%s/JMSResource/%s"%(getJMSSystemResourcePath(jms_module_name),jms_module_name)

def getConnectionFactoryPath(jms_module_name,cf_name):
    return "/JMSSystemResources/%s/JMSResource/%s/ConnectionFactories/%s" % (jms_module_name, jms_module_name, cf_name)

def getSubDeploymentPath(jms_module_name, subdeployment_name):
    return "/JMSSystemResources/%s/SubDeployments/%s" % (jms_module_name, subdeployment_name)

def getJMSServerPath(jms_server_name):
    return "/JMSServers/%s" % (jms_server_name)

def getJMSQueuePath(jmsModule, queue):
    return "/JMSSystemResources/%s/JMSResource/%s/Queues/%s" % (jmsModule, jmsModule, queue)

def getJMSTopicPath(jmsModule, topic):
    return "/JMSSystemResources/%s/JMSResource/%s/Topics/%s" % (jmsModule, jmsModule, topic)

def getServerPath(server_name):
    return "/Servers/%s" % (server_name)

def getConnectionFactoryParamsPath(jms_module_name, cf_name, group_name):
    return '/JMSSystemResources/%s/JMSResource/%s/ConnectionFactories/%s/%s/%s' % (jms_name, jms_name, cf_name, group_name, cf_name)

def cdJMSSystemResourcePath(jms_module_name):
    cd(getJMSSystemResourcePath(jms_module_name))

def cdJMSModulePath(jms_module_name):
    cd(getJMSModulePath(jms_module_name))

def cdConnectionFactoryPath(jms_module_name,cf_name):
    cd(getConnectionFactoryPath(jms_module_name,cf_name))

def cdSubDeploymentPath(jms_module_name, subdeployment_name):
    cd(getSubDeploymentPath(jms_module_name, subdeployment_name))

def checkJMSModule(jms_module_name):
    jmsModule = getMBean(getJMSModulePath(jms_module_name))
    if jmsModule is None:
        return 0
    return 1

def getJMSServer(jms_server_name):
    return getMBean(getJMSServerPath(jms_server_name))

def getServer(server_name):
    return getMBean(getServerPath(server_name))

def getConnectionFactory(jms_module_name,cf_name):
    return getMBean(getConnectionFactoryPath(jms_module_name,cf_name))

def checkJMSServer(jms_server_name):
    server = getMBean(getJMSServerPath(jms_server_name))
    if server is None:
        return 0
    return 1

def checkServer(server_name):
    server = getMBean(getServerPath(server_name))
    if server is None:
        return 0
    return 1

def checkSubDeployment(jms_module_name, subdeployment_name):
    subDeployment = getMBean(getSubDeploymentPath(jms_module_name, subdeployment_name))
    if subDeployment is None:
        return 0
    return 1

def createJMSModule(jms_module_name, jms_server_name, server_name):
    if not checkJMSModule(jms_module_name):
        print_info('Trying to create JMS Module ' + jms_module_name)
        cd('/')
        cmo.createJMSSystemResource(jms_module_name)
        print_info('JMS Module '+ jms_module_name +' was created')
        cdJMSSystemResourcePath(jms_module_name)
        if server_name and checkServer(server_name):
            print_info("Adding target %s to JMS Module %s"%(server_name,jms_module_name))
            cmo.addTarget(getServer(server_name))
        elif server_name and not checkServer(server_name):
            warn("Server %s does not exist. It was not added to created JMS Module %s"%(server_name, jms_module_name))
        return 1
    else:
        warn(jms_module_name+" exists")
    return 0

def updateJMSModule(jms_module_name, jms_server_name, server_name):
    if checkJMSModule(jms_module_name):
        print_info('Updating JMS Module ' + jms_module_name)
        cd('/')
        cdJMSSystemResourcePath(jms_module_name)
        if server_name and checkServer(server_name):
            print_info("Adding target %s to JMS Module %s"%(server_name,jms_module_name))
            targets = []
            for t in get('Targets'):
                targets.append(t)
            targets.append(getServer(server_name).objectName)
            set('Targets', jarray.array(targets, ObjectName))
        elif server_name and not checkServer(server_name):
            warn("Server %s does not exist. It was not added to JMS Module %s"%(server_name, jms_module_name))
        return 1
    else:
        warn(jms_module_name+" does not exist")
    return 0


def createSubDeployment(jms_module_name, subdeployment_name):
    cdJMSSystemResourcePath(jms_module_name)
    cmo.createSubDeployment(subdeployment_name)


def determineWebLogicVersion():
    result = re.match('^\s*?WebLogic\sServer\s([\d.]+)\s', version)
    versionNumber = result.group(1)
    return versionNumber

# compares 2 versions.
# returns 1 if version1 > version2
# returns -1 if version1 < version2
# returns 0 if versions are the same.
def compareVersions(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(".")]
    return cmp(normalize(version1), normalize(version2))

def isRedeploymentPossible():
    wlVersion = determineWebLogicVersion()
    if compareVersions(wlVersion, MINIMAL_VERSION_FOR_REDEPLOYMENT) < 0:
        return 0;
    else:
        return 1

def terminateEditSession(sessionName):
    wlVersion = determineWebLogicVersion()
    if compareVersions(wlVersion, MINIMAL_VERSION_FOR_NAMED_SESSIONS) < 0:
        print "WARNING" + ':' + "Named Sessions are not available prior to Weblogic Server " +  MINIMAL_VERSION_FOR_NAMED_SESSIONS + ". Your version is: " + version
    else:
        destroyEditSession(sessionName, force = true)
    return 1

def isNamedSessionEnabled():
    if [% enable_named_sessions %]:
        wlVersion = determineWebLogicVersion()
        if compareVersions(wlVersion, MINIMAL_VERSION_FOR_NAMED_SESSIONS) < 0:
            print "WARNING" + ':' + "Named Sessions are not available prior to Weblogic Server " + MINIMAL_VERSION_FOR_NAMED_SESSIONS + ". Your version is: " + version
            return 0
        else:
            return 1
    else:
        return 0

def isExclusiveSessionEnabled():
    return 0

def genRandomSessionName(l):
    result = 'ElectricFlowEditSession_'
    for _ in range(l):
        result = result + random.choice(string.lowercase)

    return result

randSessionName = genRandomSessionName(12)

def startChanges():
    if isNamedSessionEnabled():
        print "Named sessions are enabled"
        print "Generated edit session name is %s" % (randSessionName)
        edit(randSessionName)
    else:
        edit()

    if isExclusiveSessionEnabled():
        print "Exclusive sessions are enabled"
        startEdit(300000, 300000, 'true')
    else:
        startEdit()

sessionStarted = False
def startChangesOnce():
    if not sessionStarted:
        startChanges()
        sessionStarted = True

def isEditSessionStarted():
    return sessionStarted

def commitChangesOnce(lockTimeout = None):
    if sessionStarted:
        commitChanges(lockTimeout)
        sessionStarted = False

# Saves and activates changes
def commitChanges(lockTimeout = None):
    sessionStarted = False
    save()
    params = {'block': 'true'}
    if lockTimeout:
        params['timeout'] = lockTimeout
    activate(**params)
    if isNamedSessionEnabled():
        print "Terminating edit session %s" % (randSessionName)
        terminateEditSession(randSessionName)


def discardChanges():
    stopEdit('y')
    if isNamedSessionEnabled():
        print "Terminating edit session %s" % (randSessionName)
        terminateEditSession(randSessionName)

def discardAndExit(e, message = None):
    discardChanges()
    if message:
        print 'ERROR'+ ':' + message + " " + str(e)
    else:
        print 'ERROR'+ ':' +str(e)
    dumpStack()
    sys.exit(1)

# add parse function
def parseOptions(options, delimeter = '\\s*,\\s*'):
    print_info("Options: %s" % (options))
    optionsDict = {}
    for nextArgument in re.split(delimeter, options):
        if nextArgument != '':
            arguments = re.split('\\s*=\\s*', nextArgument)
            optionsDict[arguments[0]]=arguments[1]
    return optionsDict

# appName parameter is mandatory. Use * for appVersion and appPlanVersion to get all.
def getApplication(appName, appVersion = '', appPlanVersion = '', isLibrary = 0):
    result = []
    deployments = [];
    if not isLibrary:
        deployments = cmo.getAppDeployments()
    else:
        deployments = cmo.getLibraries()
    for deployment in deployments:
        deployment_name = deployment.getName()
        name = ''
        version = ''
        plan_version = ''

        version_array = []
        if not isLibrary:
            version_array = deployment_name.split('#')
        else:
            version_array = re.split('[#@]', deployment_name)

        if len(version_array) == 1:
            name = version_array[0]
        elif len(version_array) == 2:
            name, version = version_array
        elif len(version_array) == 3:
            name, version, plan_version = version_array

        if name == appName:
            if appVersion != '*' and appVersion != version:
                continue
            if appPlanVersion != '*' and appPlanVersion != plan_version:
                continue
            result.append(deployment)

    return result

def getApplicationState(appName, appVersion = '', appPlanVersion = ''):
    deployments = getApplication(appName, appVersion, appPlanVersion)
    applicationState = {}

    for deployment in deployments:
        domainConfig()
        deploymentName = deployment.getName()
        cd ('/AppDeployments/' + deploymentName + '/Targets')
        applicationState[deploymentName] = []
        mytargets = ls(returnMap='true')
        domainRuntime()
        cd('AppRuntimeStateRuntime')
        cd('AppRuntimeStateRuntime')

        for targetinst in mytargets:
            currentState = cmo.getCurrentState(deploymentName, targetinst)
            print "Curstate: --- " + currentState + "---\n"
            applicationState[deploymentName].append(currentState)

    return applicationState

# checks if application exists:
def checkIfApplicationExists(appName, appVersion = '', appPlanVersion = ''):
    if not appVersion:
        appVersion = '*'
    if not appPlanVersion:
        appPlanVersion = '*'

    app = getApplication(appName, appVersion, appPlanVersion)
    if app:
        return len(app)
    return 0

def checkIfLibraryExists(libName, libSpecVersion = '', libImplVersion = ''):
    if not libSpecVersion:
        libSpecVersion = '*'
    if not libImplVersion:
        libImplVersion = '*'

    libs = getApplication(libName, libSpecVersion, libImplVersion, 1)
    if libs:
        return len(libs)
    return 0

def isApplicationHasStatus(appName, appVersion, appPlanVersion, appStatuses):
    states = getApplicationState(appName, appVersion, appPlanVersion)
    result = []
    if not states:
        return result
    for key in states.keys():
        for state in states[key]:
            if state in appStatuses:
                result.append(key)
                break

    return result

def runDeploy(appName, appPath, deployParams, options):
    try:
        startChanges()
        params = {}
        params.update(deployParams)
        params.update(options)
        status = deploy(appName = appName, path = appPath, **params)
        commitChanges()
        if status.isFailed():
            print 'ERROR' + ':' + status.getMessage()
            sys.exit(1)
    except WLSTException, e:
        print "Deploy failed"
        print str(e)
        discardChanges()
        sys.exit(1)

def runRedeploy(appName, appPath, planPath, options):
    try:
        startChanges()
        status = redeploy(appName = appName, appPath = appPath, planPath = planPath, **options)
        commitChanges()
        if status.isFailed():
            print 'ERROR' + ':' + status.getMessage()
            sys.exit(1)
    except WLSTException, e:
        print "Redeploy failed"
        print str(e)
        discardChanges()
        sys.exit(1)

def startCluster(clustername):
    try:
        start(clustername, "Cluster", block='false');
    except Exception, e:
        print 'Error while starting cluster', e
        dumpStack()
        return

def getClusterMembers(clusterName):
    serverConfig()
    cd('/')
    cluster = ('/Clusters/' + clusterName)
    try:
        cd(cluster)
    except Exception, e:
        print "ERROR" + ":" + "Cluster " + clusterName + " doesn't exist."
        print "Exception: %s" % (e)
        dumpStack()
        sys.exit(1)
    servers = cmo.getServers()
    return servers

def shutdownCluster(clustername, timeout, ignoreSessions, forceShutdown):
    block = 'false'
    try:
        shutdown(clustername, "Cluster", ignoreSessions, timeout, forceShutdown, block);
    except Exception, e:
        print 'Error while shutting down cluster',e
        dumpStack()
        return

def isClusterHasStatus(clusterName, clusterStatuses):
    serverConfig()
    retval = []
    servers = getClusterMembers(clusterName)
    print "Clustername: %s" % (clusterName)
    domainRuntime()
    for server in servers:
        srv = server.getName()
        status = cmo.lookupServerLifeCycleRuntime(srv).getState()
        if status in clusterStatuses:
            retval.append(srv)
    return retval

def getClusterStatus(clusterName):
    serverConfig()
    retval = {}
    servers = getClusterMembers(clusterName)
    domainRuntime()
    for server in servers:
        srv = server.getName()
        retval[srv] = cmo.lookupServerLifeCycleRuntime(srv).getState()
    return retval


def getJMSResource(name):
    if isEmpty(name):
        raise Exception("No JMS Module Name is provided")
    mbean = getMBean('/JMSSystemResources/%s' % name)
    if mbean == None:
        return None
    else:
        print_debug("Got JMS Bean %s" % mbean)
        return mbean.getJMSResource()

def readBool(value):
    value = value.strip()
    if value:
        return True
    else:
        return False

def readInt(value, default_value = 0):
    value = value.strip()
    if value:
        return int(value)
    else:
        return default_value

def readString(value, default_value = ''):
    value = value.strip()
    if value:
        return value
    else:
        return default_value

def createOrUpdateSubdeployment(jmsModuleName, subName, jmsTargetList = [], targetList = [], updateTargets = False):
    # Subdeployment bean
    subdeployment = getMBean(getSubDeploymentPath(jmsModuleName, subName))
    if subdeployment == None:
        print_info("Subdeployment %s does not exist" % subName)
        jmsModuleBean = getMBean('/JMSSystemResources/' + jmsModuleName)
        if jmsModuleBean == None:
            raise Exception('JMS Resource %s does not exist' % jmsModuleName)
        subdeployment = jmsModuleBean.createSubDeployment(subName)
        print_info("Created Subdeployment %s" % subName)
    elif not updateTargets:
        print_info("Subdeployment %s already exist, targets are NOT going to be updated" % subName)
        return subdeployment

    # Targeting
    oldTargets = subdeployment.getTargets() # beans
    oldJMSTargets = []
    oldTargets = []
    for t in subdeployment.targets:
        if t.type == 'JMSServer':
            oldJMSTargets.append(t)
        else:
            oldTargets.append(t)

    # JMS Targets
    for t in jmsTargetList:
        if t.objectName in map(lambda x: x.objectName, oldJMSTargets):
            print_debug('JMS Target %s is both in old and new lists' % t.objectName)
        else:
            print_info("Adding %s to the list of targets" % targetName(t))
            subdeployment.addTarget(t)

    for t in oldJMSTargets:
        if t.objectName in map(lambda x: x.objectName, jmsTargetList):
            print_debug('JMS Target %s is both in old and new lists' % t.objectName)
        else:
            subdeployment.removeTarget(t)
            print_info("Removing %s from the list of targets" % targetName(t))

    # Targets
    for t in targetList:
        if t.objectName in map(lambda x: x.objectName, oldTargets):
            print_debug('Target %s is both in old and new lists' % t.objectName)
        else:
            subdeployment.addTarget(t)
            print_info("Adding %s to the list of targets" % targetName(t))

    for t in oldTargets:
        if t.objectName in map(lambda x: x.objectName, targetList):
            print_debug('Target %s is both in old and new lists' % t.objectName)
        else:
            subdeployment.removeTarget(t)
            print_info("Removing %s from the list of targets" % targetName(t))

    return subdeployment

def deleteConnectionFactory(jmsModuleName, cfName):
    if isEmpty(jmsModuleName):
        raise Exception("JMS Module Name is not provided")
    if isEmpty(cfName):
        raise Exception("Connection Factory name is not provided")
    bean = getMBean('%s/ConnectionFactories/' % getJMSModulePath(jmsModuleName))
    cfBean = getMBean(getConnectionFactoryPath(jmsModuleName, cfName))
    if cfBean != None:
        bean.destroyConnectionFactory(cfBean)
        print_info("Removed Connection Factory %s from the module %s" % (cfName, jmsModuleName))
    else:
        print_info("Connection Factory %s does not exist in the module %s" % (cfName, jmsModuleName))

def deleteJMSModule(jmsModuleName):
    if isEmpty(jmsModuleName):
        raise Exception("JMS Module Name is not provided")
    bean = getMBean(getJMSSystemResourcePath(jmsModuleName))
    if bean == None:
        print_info("JMS Module %s does not exist" % jmsModuleName)
    else:
        cd('/')
        cmo.destroyJMSSystemResource(bean)
        print_info("JMS Module %s has been deleted" % jmsModuleName)


def deleteJMSQueue(jmsModuleName, queueName):
    if isEmpty(jmsModuleName):
        raise Exception("JMS Module Name is not provided")
    if isEmpty(queueName):
        raise Exception("Queue name is not provided")

    bean = getMBean('%s/Queues/' % getJMSModulePath(jmsModuleName))
    queueBean = getMBean(getJMSQueuePath(jmsModuleName, queueName))
    if queueBean != None:
        bean.destroyQueue(queueBean)
        print_info("Removed JMS Queue %s from the module %s" % (queueName, jmsModuleName))
    else:
        print_info("JMS Queue %s does not exist in the module %s" % (queueName, jmsModuleName))

def deleteJMSTopic(jmsModuleName, topicName):
    if isEmpty(jmsModuleName):
        raise Exception("JMS Module Name is not provided")
    if isEmpty(topicName):
        raise Exception("Topic name is not provided")

    bean = getMBean('%s/Topics/' % getJMSModulePath(jmsModuleName))
    topicBean = getMBean(getJMSTopicPath(jmsModuleName, topicName))
    if topicBean != None:
        bean.destroyTopic(topicBean)
        print_info("Removed JMS Topic %s from the module %s" % (topicName, jmsModuleName))
    else:
        print_info("JMS Topic %s does not exist in the module %s" % (topicName, jmsModuleName))

def deleteSubDeployment(jmsModuleName, subdeploymentName):
    if isEmpty(jmsModuleName):
        raise Exception("JMS Module Name is not provided")
    if isEmpty(subdeploymentName):
        raise Exception("Subdeployment name is not provided")
    bean = getMBean(getJMSSystemResourcePath(jmsModuleName))
    subBean = getMBean(getSubDeploymentPath(jmsModuleName, subdeploymentName))
    if subBean != None:
        bean.destroySubDeployment(subBean)
        print_info("Removed subdeployment %s from the module %s" % (subdeploymentName, jmsModuleName))
    else:
        print_info("Subdeployment %s does not exist in the module %s" % (subdeploymentName, jmsModuleName))


def deleteJMSServer(jmsServerName):
    if isEmpty(jmsServerName):
        raise Exception("JMS Server Name is not provided")
    bean = getMBean(getJMSServerPath(jmsServerName))
    if bean != None:
        cmo.destroyJMSServer(bean)
        print_info("Removed JMS Server %s" % jmsServerName)
    else:
        print_info("JMS Server %s does not exist" % jmsServerName)

def getTargetBean(targetName):
    if isEmpty(targetName):
        raise Exception('Target name is not provided')
    bean = getMBean('/Servers/' + targetName)
    if bean == None:
        bean = getMBean('/Clusters/' + targetName)

    if bean == None:
        raise Exception("Target %s was not found in Servers or Clusters, please check the name of the target." % targetName)
    return bean

def getJMSTargetBean(targetName):
    if isEmpty(targetName):
        raise Exception('No JMS Server name is provided')
    bean = getMBean('/JMSServers/%s' % targetName)
    if bean == None:
        raise Exception('JMS Server %s does not exist' % targetName)
    return bean

def targetName(targetBean, failIfNone = False):
    if targetBean == None:
        if failIfNone:
            raise Exception("Target Bean is not provided")
        else:
            return "None"
    return str(targetBean.type) + ' "' + str(targetBean.name) + '"'


def rebuildTargetList(newTargetList, currentTargetList, bean = None):
    targetsToAdd = []
    targetsToRemove = []

    for target in newTargetList:
        if not filter(lambda x: x.objectName == target.objectName, currentTargetList):
            targetsToAdd.append(target)

    for target in currentTargetList:
        if not filter(lambda x: x.objectName == target.objectName, newTargetList):
            targetsToRemove.append(target)

    if bean == None:
        return targetsToAdd, targetsToRemove

    if targetsToAdd:
        for target in targetsToAdd:
            bean.addTarget(target)
            print_info("Adding target %s to the list of targets" % targetName(target))
    else:
        print_info("No new targets to add")

    if targetsToRemove:
        for target in targetsToRemove:
            bean.removeTarget(target)
            print_info("Removing target %s from the list of targets" % targetName(target))
    else:
        print_info("No targets to remove")
    return targetsToAdd, targetsToRemove

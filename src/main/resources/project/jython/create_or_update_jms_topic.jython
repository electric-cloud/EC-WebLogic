#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

# parameters section

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

topicName = r'''
[% ecp_weblogic_jms_topic_name %]
'''.strip()

jndiName = r'''
[% ecp_weblogic_jndi_name %]
'''.strip()

jmsModuleName = r'''
[% ecp_weblogic_jms_module_name %]
'''.strip()

subdeploymentName = r'''
[% ecp_weblogic_subdeployment_name %]
'''.strip()

additionalOptions = r'''
[% ecp_weblogic_additional_options %]
'''.strip()

updateAction = readString(r'''
[% ecp_weblogic_update_action %]
''', 'do_nothing')

jmsServerName = r'''
[% ecp_weblogic_target_jms_server %]
'''.strip()

required(jmsModuleName, 'No JMS Module Name is provided')
required(topicName, 'No JMS Topic name is provided')

connect(username, password, adminUrl)
successMessage = ''

# JMS Module and Bean
jmsResource = getJMSResource(jmsModuleName)
print_debug("Found JMS Resource %s" % jmsModuleName)
if jmsResource == None:
    print_error('JMS Resource %s does not exist' % jmsModuleName)
    sys.exit(1)

jmsTopic = getMBean(getJMSTopicPath(jmsModuleName, topicName))
if jmsTopic != None and updateAction == DO_NOTHING:
    print_summary('JMS Topic %s exists, no further action is required' % topicName)
    print_info("No action is required")
    sys.exit(0)


successMessage = ''
# Subdeployment
removedTopic = False
subdeployment = None
if not isEmpty(subdeploymentName):
    required(jmsServerName, "JMS Server name is required for Targeting")
    try:
        startChanges()
        jmsTargets = []
        if jmsServerName:
            target = getJMSTargetBean(jmsServerName)
            jmsTargets.append(target)
        if updateAction == REMOVE_AND_CREATE:
            if jmsTopic != None:
                deleteJMSTopic(jmsModuleName, topicName)
                removedTopic = True
            deleteSubDeployment(jmsModuleName, subdeploymentName)
        subdeployment = createOrUpdateSubdeployment(jmsModuleName, subdeploymentName, jmsTargetList = jmsTargets, updateTargets = False)
    except Exception, e:
        discardAndExit(e, "Failed to create Subdeployment for JMS Topic")
    commitChanges()

try:
    startChanges()
    jmsResource = getJMSResource(jmsModuleName)
    print_debug("Found JMS Resource %s" % jmsModuleName)
    if jmsResource == None:
        raise Exception("JMS Resource %s does not exist" % jmsModuleName)
    jmsTopic = getMBean(getJMSTopicPath(jmsModuleName, topicName))
    update = False
    if jmsTopic == None:
        print_info("JMS Topic %s does not exist" % topicName)
        jmsTopic = jmsResource.createTopic(topicName)
        print_info("Created Topic %s" % topicName)
        if removedTopic:
            successMessage = 'Recreated JMS Topic %s' % topicName
        else:
            successMessage = 'Created JMS Topic %s' % topicName
    else:
        print_info("Found JMS Topic %s in the module %s" % (topicName, jmsModuleName))
        if updateAction == DO_NOTHING:
            discardChanges()
            print_summary('JMS Topic %s already exists, no further action is required' % topicName)
            print_info("No action is required")
            sys.exit(0)
        elif updateAction == REMOVE_AND_CREATE:
            deleteJMSTopic(jmsModuleName, topicName)
            jmsTopic = jmsResource.createTopic(topicName)
            print_info("Created Topic %s" % topicName)
            successMessage = 'Recreated JMS Topic %s' % topicName
        else:
            update = True
            print_info("Doing selective update")
            successMessage = 'Updated JMS Topic %s' % topicName

    cd(getJMSTopicPath(jmsModuleName, topicName))
    if get('JNDIName') != jndiName:
        set('JNDIName', jndiName)
        print_info('Set JNDI Name %s' % jndiName)
    else:
        print_info("JNDI Name is not changed")

    if not isEmpty(subdeploymentName):
        if get('SubDeploymentName') != subdeploymentName:
            set('SubDeploymentName', subdeploymentName)
            print_info("Set subdeployment name to %s" % subdeploymentName)
        else:
            print_info("Subdeployment has not changed")

    if not update:
        options = parseOptions(additionalOptions, delimeter = '\n+')
        print_info("Additional Options: %s" % options)
        for key, value in options.items():
            if key.find('.') != -1:
                (groupName, paramName) = key.split('.')
                cd(getJMSTopicPath(jmsModuleName, topicName) + '/' + groupName + '/' + topicName)
                print_info("Setting additional option %s/%s -> %s" % (groupName, paramName, value))
                set(paramName, value)
            else:
                print "Setting additional option %s -> %s" % (key, value)
                set(key, value)

except Exception, e:
    discardAndExit(e, "Failed to create JMS Topic")

# eveything is fine, commiting
commitChanges()
if successMessage != '':
    print_summary(successMessage)

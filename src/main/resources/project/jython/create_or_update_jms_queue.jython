#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

# parameters section

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

queueName = r'''
[% ecp_weblogic_jms_queue_name %]
'''.strip()

jndiName = r'''
[% ecp_weblogic_jndi_name %]
'''.strip()

jmsModuleName = readString(r'''[% ecp_weblogic_jms_module_name %]''')

jmsServerName = r'''
[% ecp_weblogic_jms_server_name %]
'''.strip()

subdeploymentName = r'''
[% ecp_weblogic_subdeployment_name %]
'''.strip()

additionalOptions = readString('''[% ecp_weblogic_additional_options %]'''.strip(), '')
updateAction = readString(r'''[% ecp_weblogic_update_action %]''', 'do_nothing')

connect(username, password, adminUrl)

try:
    startChanges()
    jmsResource = getJMSResource(jmsModuleName)
    print_debug("Found JMS Resource %s" % jmsModuleName)
    if jmsResource == None:
        raise Exception("JMS Resource %s does not exist" % jmsModuleName)
    jmsQueue = getMBean(getJMSQueuePath(jmsModuleName, queueName))
    update = False
    if jmsQueue == None:
        print_info("JMS Queue %s does not exist" % queueName)
        jmsQueue = jmsResource.createQueue(queueName)
        print_info("Created Queue %s" % queueName)
    else:
        print_info("Found JMS Queue %s in the module %s" % (queueName, jmsModuleName))
        if updateAction == 'do_nothing':
            discardChanges()
            print_info("No action is required")
            sys.exit(0)
        elif updateAction == 'remove_and_create':
            deleteJMSQueue(jmsModuleName, queueName)
            jmsQueue = jmsResource.createQueue(queueName)
            print_info("Created Queue %s" % queueName)
        else:
            update = True
            print_info("Doing selective update")

    if not isEmpty(subdeploymentName):
        subdeployment = createOrUpdateSubdeployment(jmsModuleName, subdeploymentName, jmsServerName)

    cd(getJMSQueuePath(jmsModuleName, queueName))
    if get('JNDIName') != jndiName:
        set('JNDIName', jndiName)
        print_info('Set JNDI Name %s' % jndiName)
    else:
        print_info("JNDI Name is not changed")

    if not isEmpty(subdeploymentName):
        if get('SubDeploymentName') != subdeploymentName:
            set('SubDeploymentName', subdeploymentName)
            print_info("Set subdeployment name to %s" % subdeploymentName)
        else:
            print_info("Subdeployment has not changed")

    if not update:
        options = parseOptions(additionalOptions, delimeter = '\n+')
        print_info("Additional Options: %s" % options)
        for key, value in options.items():
            if key.find('.') != -1:
                (groupName, paramName) = key.split('.')
                cd(getJMSQueuePath(jmsModuleName, queueName) + '/' + groupName + '/' + queueName)
                print_info("Setting additional option %s/%s -> %s" % (groupName, paramName, value))
                set(paramName, value)
            else:
                print "Setting additional option %s -> %s" % (key, value)
                set(key, value)


    # cf = getMBean(getConnectionFactoryPath(jmsModuleName, cfName))
    # update = False
    # if cf == None:
    #     print_info("Connection Factory %s does not exist" % cfName)
    #     cf = jmsResource.createConnectionFactory(cfName)
    #     print_info("Created Connection Factory %s" % cfName)
    # else:
    #     print_info("Found Connection Factory %s in the module %s" % (cfName, jmsModuleName))
    #     if updateAction == 'do_nothing':
    #         print_info("No action is required")
    #         sys.exit(0)
    #     elif updateAction == 'remove_and_create':
    #         deleteConnectionFactory(jmsModuleName, cfName)
    #         cf = jmsResource.createConnectionFactory(cfName)
    #         print_info("Created Connection Factory %s" % cfName)
    #     elif updateAction == 'selective_update':
    #         print_info("Selective update")
    #         update = True

    # if not isEmpty(subdeploymentName):
    #     subdeployment = createOrUpdateSubdeployment(jmsModuleName, subdeploymentName, jmsServerName)

    # cd(getConnectionFactoryPath(jmsModuleName, cfName))
    # if get('JNDIName') != jndiName:
    #     set('JNDIName', jndiName)
    #     print_info("Set JNDI Name to %s" % jndiName)
    # else:
    #     print_info("JNDI name is not changed")

    # if not isEmpty(subdeploymentName):
    #     if get('SubDeploymentName') != subdeploymentName:
    #         # Removing Default Targeting
    #         set('DefaultTargetingEnabled', False)
    #         set('SubDeploymentName', subdeploymentName)
    #         print_info("Set subdeployment name to %s" % subdeploymentName)
    #     else:
    #         print_info("Subdeployment name is not changed")
    # else:
    #     if not update:
    #         set('DefaultTargetingEnabled', True)
    #         print_info("Set default targeting")
    #     else:
    #         print_info("Will not change targeting for Connection Factory")

    # if not update:
    #     # ClientParams
    #     cd('%s/ClientParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
    #     set('SubscriptionSharingPolicy', cfSharingPolicy)
    #     print_debug('Set SubscriptionSharingPolicy to %s' % cfSharingPolicy)
    #     set('ClientIdPolicy', clientIDPolicy)
    #     print_debug('Set ClientIdPolicy to %s' % clientIDPolicy)
    #     if maxMessagesPerSession > 0:
    #         set('MessagesMaximum', maxMessagesPerSession)
    #         print_debug('Set MessagesMaximum to %s' % maxMessagesPerSession)

    #     # TransactionParams
    #     cd('%s/TransactionParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
    #     set('XAConnectionFactoryEnabled', xaEnabled)
    #     print_debug('Set XAConnectionFactoryEnabled to %s' % xaEnabled)

    #     options = parseOptions(additionalOptions, delimeter = '\n+')
    #     print_info("Additional Options: %s" % options)
    #     for key, value in options.items():
    #         (groupName, paramName) = key.split('.')
    #         cd(getConnectionFactoryPath(jmsModuleName, cfName) + '/' + groupName + '/' + cfName)
    #         print_info("Setting additional option %s/%s -> %s" % (groupName, paramName, value))
    #         set(paramName, value)

except Exception, e:
    discardAndExit(e, "Failed to create JMS Queue")

# eveything is fine, commiting
commitChanges()

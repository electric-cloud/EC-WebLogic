#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

# parameters section
username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

dsName = r'''
[% dataSourceName %]
'''.strip()

databaseName = r'''
[% databaseName %]
'''.strip()

dsDriverClass = r'''
[% dataSourceDriverClass  %]
'''.strip()

dsUrl = r'''
[% databaseUrl %]
'''.strip()

dsJndi = r'''
[% jndiName %]
'''.strip()

targets = r'''
[% targets %]
'''.strip()

updateAction = r'''
[% updateAction %]
'''.strip()
updateAction = readString(updateAction, 'do_nothing')

additionalOptions = r'''
[% additionalOptions %]
'''.strip()

dsUsername = r'''
[% dataSourceCredentialsUsername %]
'''.strip()

dsPassword = r'''
[% dataSourceCredentialsPassword %]
'''.strip()

driverProperties = r'''
[% driverProperties %]
'''.strip()


required(dsName, 'Datasource name is not provided')
required(dsDriverClass, 'Datasource Driver class is not provided')
required(dsJndi, 'JNDI is not provided')
required(dsUrl, 'Datasource URL is not provided')
required(dsUsername, 'Username is not provided')
required(dsPassword, 'Password is not provided')

connect(username, password, adminUrl)

successMessage = 'Created datasource %s successfully' % dsName
update = False
datasource = getMBean(getDatasourcePath(dsName))


# Initial processing
if datasource != None:
    if updateAction == REMOVE_AND_CREATE:
        successMessage = 'Recreated datasource %s' % dsName
        try:
            startChanges()
            deleteDatasource(dsName)
            commitChanges()
            print_info("Removed datasource %s" % dsName)
        except Exception, e:
            discardAndExit("Failed to delete datasource: " + str(e))

    elif updateAction == DO_NOTHING:
        print_summary("Datasource %s exists, no further action is required" % (dsName))
        sys.exit(0)
    else:
        successMessage = 'Updated datasource %s' % dsName
        update = True
        print_info("Updating datasource %s" % dsName)
else:
    print_info("Datasource %s does not exist" % dsName)

try:
    startChanges()
    datasource = getMBean(getDatasourcePath(dsName))
    systemResources = getMBean('/JDBCSystemResources')
    if datasource == None:
        datasource = systemResources.createJDBCSystemResource(dsName)
        datasource.getJDBCResource().setName(dsName)

    resource = datasource.getJDBCResource()
    driver = resource.getJDBCDriverParams()
    driverprops = driver.getProperties()
    params = resource.getJDBCDataSourceParams()

    # Updating credentials
    upsertProperty(driverprops, 'user', dsUsername)
    driver.setPassword(dsPassword)
    # TODO encryption
    print_debug("Set password")

    if not update:
        if databaseName:
            upsertProperty(driverprops, 'databaseName', databaseName)
        driver.setUrl(dsUrl)
        print_debug("Set url to %s" % dsUrl)
        driver.setDriverName(dsDriverClass)
        print_debug("Set driver class to %s" % dsDriverClass)
        params.setJNDINames([dsJndi])
        print_debug("Set JNDI to %s" % dsJndi)

        # Driver Properties
        if driverProperties:
            for prop in re.split('\\n', driverProperties):
                (key, value) = re.split('=', prop, 1)
                if key and value:
                    upsertProperty(driverprops, key, value)


    # Targets
    if targets:
        newTargets = stringToTargetList(targets)
        rebuildTargetList(newTargets, datasource.getTargets(), datasource)
    else:
        print_warning("No targets are provided, the datasource will not be deployed")

    # wls:/base_domain/serverConfig/JDBCSystemResources/my_datasource/Resource/my_datasource/JDBCConnectionPoolParams/my_datasource> ls()
    # Additional Options come in form Category.Subcategory.Option=value
    if additionalOptions and not update:
        options = splitSeparatedString(additionalOptions, '\\n+')
        for optionLine in options:
            (categories, value) = re.split('=', optionLine)
            parts = re.split('\\.', categories)
            optionName = parts.pop()
            propertyPath = '/JDBCSystemResources/' + dsName + '/' + '/'.join(map(lambda x: x + '/' + dsName, parts))
            cd(propertyPath)
            set(optionName, value)
            print_info("Setting %s/%s to %s" % (propertyPath, optionName, value))
    commitChanges()

except WLSTException, e:
    discardAndExit(e, "Failed to create Datasource %s" % dsName)


if successMessage != '':
    print_summary(successMessage)


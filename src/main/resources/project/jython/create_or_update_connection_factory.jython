#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

# parameters section

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

cfName = r'''
[% cf_name %]
'''.strip()

jndiName = r'''
[% jndi_name %]
'''.strip()

cfSharingPolicy = r'''
[% cf_sharing_policy %]
'''.strip()

clientIDPolicy = r'''
[% cf_client_id_policy %]
'''.strip()

maxMessagesPerSession = readInt(r'''[% cf_max_messages_per_session %]''', None)
xaEnabled = readBool(r'''[% cf_xa_enabled %]''')
attachJMSXUserId = readBool(r'''[% cf_attach_jmsx_userid %]''')

jmsModuleName = readString(r'''[% jms_module_name %]''')

jmsServerName = r'''
[% jms_server_name %]
'''.strip()

serverName = r'''
[% server_name %]
'''.strip()

subdeploymentName = r'''
[% subdeployment_name %]
'''.strip()

additionalOptions = readString('''[% additional_options %]'''.strip(), '')
updateAction = readString(r'''[% update_action %]''', 'do_nothing')

connect(username, password, adminUrl)

try:
    startChanges()
    jmsResource = getJMSResource(jmsModuleName)
    print_debug("Found JMS Resource %s" % jmsModuleName)
    if jmsResource == None:
        raise Exception("JMS Resource %s does not exist" % jmsModuleName)

    cf = getMBean(getConnectionFactoryPath(jmsModuleName, cfName))
    if cf == None:
        print_info("Connection Factory %s does not exist" % cfName)
        cf = jmsResource.createConnectionFactory(cfName)
        print_info("Created Connection Factory %s" % cfName)
    else:
        print_info("Found Connection Factory %s in the module %s" % (cfName, jmsModuleName))
        if updateAction == 'do_nothing':
            print_info("No action is required")
            discardChanges()
            sys.exit(0)
        elif updateAction == 'remove_and_create':
            deleteConnectionFactory(jmsModuleName, cfName)
            cf = jmsResource.createConnectionFactory(cfName)
            print_info("Created Connection Factory %s" % cfName)

    if not isEmpty(subdeploymentName):
        subdeployment = createOrUpdateSubdeployment(jmsModuleName, subdeploymentName, jmsServerName)

    cd(getConnectionFactoryPath(jmsModuleName, cfName))
    set('JNDIName', jndiName)

    if not isEmpty(subdeploymentName):
        set('SubDeploymentName', subdeploymentName)
        print_debug("Set subdeployment name to %s" % subdeploymentName)
    else:
        set('DefaultTargetingEnabled', True)
        print_debug("Set default targeting")

    # ClientParams
    cd('%s/ClientParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
    set('SubscriptionSharingPolicy', cfSharingPolicy)
    set('ClientIdPolicy', clientIDPolicy)
    if maxMessagesPerSession > 0:
        set('MessagesMaximum', maxMessagesPerSession)

    # TransactionParams
    cd('%s/TransactionParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
    set('XAConnectionFactoryEnabled', xaEnabled)

    options = parseOptions(additionalOptions, delimeter = '\n+')
    print_info("Additional Options: %s" % options)
    for groupName in options.keys():
        cd(getConnectionFactoryPath(jmsModuleName, cfName, groupName))
        opts = options[groupName]
        for name, value in opts.items():
            print_info('%s: %s -> %s' % (groupName, name, value))
            set(name, value)

except Exception, e:
    discardAndExit(e, "Failed to create Connection Factory")

# eveything is fine, commiting
commitChanges()

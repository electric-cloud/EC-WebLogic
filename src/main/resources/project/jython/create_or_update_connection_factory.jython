#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

[% preamble %]

# parameters section

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

cfName = r'''
[% cf_name %]
'''.strip()

jndiName = r'''
[% jndi_name %]
'''.strip()

cfSharingPolicy = r'''
[% cf_sharing_policy %]
'''.strip()

clientIDPolicy = r'''
[% cf_client_id_policy %]
'''.strip()

maxMessagesPerSession = r'''
[% cf_max_messages_per_session %]
'''.strip()
maxMessagesPerSession = readInt(maxMessagesPerSession, 0)

xaEnabled = r'''
[% cf_xa_enabled %]
'''.strip()

jmsModuleName = r'''
[% jms_module_name %]
'''.strip()

jmsServerList = r'''
[% jms_server_list %]
'''.strip()

wlsInstanceList = r'''
[% wls_instance_list %]
'''.strip()

subdeploymentName = r'''
[% subdeployment_name %]
'''.strip()

additionalOptions = r'''
[% additional_options %]
'''.strip()

updateAction = r'''
[% update_action %]
'''.strip()
updateAction = readString(updateAction, 'do_nothing')

required(jmsModuleName, 'JMS Module name is not provided')
required(cfName, 'Connection Factory name is not provided')

connect(username, password, adminUrl)
successMessage = ''

jmsResource = getJMSResource(jmsModuleName)
print_debug("Found JMS Resource %s" % jmsModuleName)
if jmsResource == None:
    raise Exception("JMS Resource %s does not exist" % jmsModuleName)

cf = getMBean(getConnectionFactoryPath(jmsModuleName, cfName))
if cf != None and updateAction == DO_NOTHING:
    print_summary('Connection Factory %s exists, no further action is required' % cfName)
    print_info("No action is required")
    sys.exit(0)

# Subdeployment
# Subdeployment must be created and the changes must be activated
# Otherwise, the procedure will fail with "exception in prepare"
subdeployment = None
if not isEmpty(subdeploymentName) and (cf == None or updateAction != DO_NOTHING):
    try:
        startChanges()
        jmsTargets = []
        for jmsServerName in splitSeparatedString(jmsServerList):
            if jmsServerName:
                target = getJMSTargetBean(jmsServerName)
                jmsTargets.append(target)

        wlsTargets = []
        for instanceName in splitSeparatedString(wlsInstanceList):
            if instanceName:
                wlsTargets.append(getTargetBean(instanceName))
        if updateAction == REMOVE_AND_CREATE:
            deleteSubDeployment(jmsModuleName, subdeploymentName)
        subdeployment = createOrUpdateSubdeployment(jmsModuleName, subdeploymentName, jmsTargetList = jmsTargets, targetList = wlsTargets, updateTargets = False)
    except Exception, e:
        discardAndExit(e, "Failed to create Subdeployment")
    commitChanges()

try:
    startChanges()
    jmsResource = getJMSResource(jmsModuleName)
    if jmsResource == None:
        raise Exception("JMS Resource %s does not exist" % jmsModuleName)

    cf = getMBean(getConnectionFactoryPath(jmsModuleName, cfName))
    update = False
    if cf == None:
        print_info("Connection Factory %s does not exist" % cfName)
        cf = jmsResource.createConnectionFactory(cfName)
        print_info("Created Connection Factory %s" % cfName)
        successMessage = 'Created Connection Factory %s' % cfName
    else:
        print_info("Found Connection Factory %s in the module %s" % (cfName, jmsModuleName))
        if updateAction == DO_NOTHING:
            discardChanges()
            print_summary('Connection Factory %s exists, no further action is required' % cfName)
            print_info("No action is required")
            sys.exit(0)
        elif updateAction == REMOVE_AND_CREATE:
            deleteConnectionFactory(jmsModuleName, cfName)
            cf = jmsResource.createConnectionFactory(cfName)
            print_info("Created Connection Factory %s" % cfName)
            successMessage = 'Recreated Connection Factory %s' % cfName
        elif updateAction == SELECTIVE_UPDATE:
            print_info("Selective update")
            successMessage = 'Updated Connection Factory %s' % cfName
            update = True

    cd(getConnectionFactoryPath(jmsModuleName, cfName))
    if get('JNDIName') != jndiName:
        set('JNDIName', jndiName)
        print_info("Set JNDI Name to %s" % jndiName)
    else:
        print_info("JNDI name is not changed")

    if not isEmpty(subdeploymentName):
        # Removing Default Targeting
        # It's important to use set() and not setDefaultTargetingEnabled because of 10.3.6
        set('DefaultTargetingEnabled', boolValue(False))
        if cf.getSubDeploymentName() != subdeploymentName:
            cf.setSubDeploymentName(subdeploymentName)
            successMessage += ', Set Targeting to Subdeployment %s' % subdeploymentName
            print_info("Set subdeployment name to %s" % subdeploymentName)
        else:
            print_info("Subdeployment name is not changed")
            successMessage += ', Subdeployment name does not require update'
    else:
        if not update:
            successMessage += ', Set Default Targeting'
            set('DefaultTargetingEnabled', boolValue(True))
            print_info("Set default targeting")
        else:
            print_info("Will not change targeting for Connection Factory")
            successMessage += ', Targeting will not be changed'

    if not update:
        # ClientParams
        cd('%s/ClientParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
        set('SubscriptionSharingPolicy', cfSharingPolicy)
        print_debug('Set SubscriptionSharingPolicy to %s' % cfSharingPolicy)
        set('ClientIdPolicy', clientIDPolicy)
        print_debug('Set ClientIdPolicy to %s' % clientIDPolicy)
        if maxMessagesPerSession > 0:
            set('MessagesMaximum', maxMessagesPerSession)
            print_debug('Set MessagesMaximum to %s' % maxMessagesPerSession)

        # TransactionParams
        cd('%s/TransactionParams/%s' % (getConnectionFactoryPath(jmsModuleName, cfName), cfName))
        set('XAConnectionFactoryEnabled', boolValue(xaEnabled))
        print_info('Set XAConnectionFactoryEnabled to %s' % boolValue(xaEnabled))
        options = parseOptions(additionalOptions, delimeter = '\n+')
        print_info("Additional Options: %s" % options)
        for key, value in options.items():
            (groupName, paramName) = key.split('.')
            cd(getConnectionFactoryPath(jmsModuleName, cfName) + '/' + groupName + '/' + cfName)
            print_info("Setting additional option %s/%s -> %s" % (groupName, paramName, value))
            set(paramName, value)

except Exception, e:
    discardAndExit(e, "Failed to create Connection Factory")

# eveything is fine, commiting
commitChanges()
if successMessage != '':
    print_summary(successMessage)


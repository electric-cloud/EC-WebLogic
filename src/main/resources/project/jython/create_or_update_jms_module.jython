#
#  Copyright 2016 Electric Cloud, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#


[% preamble %]

# parameters section

username = r'''
[% username %]
'''.strip()

password = r'''
[% password %]
'''.strip()

adminUrl = r'''
[% admin_url %]
'''.strip()

jmsModuleName = r'''
[% ecp_weblogic_jms_module_name %]
'''.strip()

targetListString = r'''
[% ecp_weblogic_target_list %]
'''.strip()

updateAction = r'''
[% ecp_weblogic_update_action %]
'''.strip()
updateAction = readString(updateAction, 'do_nothing')

successMessage = ''

connect(username, password, adminUrl)

try:
    startChanges()
    update = False
    jmsSystemResource = getMBean(getJMSSystemResourcePath(jmsModuleName))
    cd('/')
    if jmsSystemResource == None:
        print_info("JMS System Module %s does not exist" % jmsModuleName)
        jmsSystemResource = cmo.createJMSSystemResource(jmsModuleName)
        successMessage = 'Created JMS System Module %s' % jmsModuleName
    else:
        if updateAction == 'do_nothing':
            print_summary("JMS System Module %s exists, no further action is required" % jmsModuleName)
            discardChanges()
            sys.exit(0)
        elif updateAction == 'remove_and_create':
            successMessage = 'Recreated JMS System Module %s' % jmsModuleName
            print_info("JMS System Module %s already exists" % jmsModuleName)
            deleteJMSModule(jmsModuleName)
            jmsSystemResource = cmo.createJMSSystemResource(jmsModuleName)
        else:
            print_info("Doing selective update")
            update = True
            successMessage = 'Updated JMS System Module %s' % jmsModuleName

    newTargetList = map(lambda x: getTargetBean(x),re.split('\\s*,\\s*', targetListString))
    currentTargetList = jmsSystemResource.getTargets()
    added, removed = rebuildTargetList(newTargetList, currentTargetList, jmsSystemResource)

    if added:
        successMessage += ', Added %s target(s)' % len(added)
    else:
        successMessage += ', No new targets were added'

    if removed:
        successMessage += ', Removed %s target(s)' % len(removed)
    else:
        successMessage += ', No targets were removed'

except Exception, e:
    discardAndExit(e, "Failed to create JMS Module")

commitChanges()
if successMessage != '':
    print_summary(successMessage)

